scalar JSON

type Query {
  fetchUsers: JSON!
  getManagement: JSON!
  getPrice(name: String!): Price!
  getLog(channel: String!, chaincode: String!, chaincodeVer: String!, args: [String!]): JSON!
  getAllLogs(channel: String!, chaincode: String!, chaincodeVer: String!, args: [String!]): JSON!
  getLogCount(channel: String!, chaincode: String!, chaincodeVer: String!, args: [String!]): JSON!
}

type Mutation {
    signUp(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
    changePassword(email: String!, id: ID, newPassword: String!): User
    forgotPassword(email: String!): JSON!
    updateUserRole(userId: String!, role: String!): JSON!
    manage(license: String!, licenseType: String!, quantity: Float!, listFee: Float!, discount: Float, netFee: Float, productSupportFee: Float, softwareUpdateFee: Float, otherFees: Float, cdPackFee: Float, unitPrice: Float): Management
}

type AuthPayload {
  token: String
  user: User
}

type User {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Management {
  license: String!
  licenseType: String!
  quantity: Float!
  listFee: Float!
  discount: Float
  netFee: Float
  productSupportFee: Float
  softwareUpdateFee: Float
  otherFees: Float
  cdPackFee: Float
  unitPrice: Float
}

type Price {
  name: String!
  NUP: String
  NUPSupport: String
  Processor: String
  ProcessorSupport: String
}

enum Role {
  ADMIN
  USER
}