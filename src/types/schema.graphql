scalar JSON
scalar Upload

type Query {
  fetchUsers: JSON!
  getManagement: JSON!
  getPrice(name: String!): Price!
  getAllLogs: JSON!
  getAllProcLogs: JSON!
  getAllNUPLogs: JSON!
  getReconcile: JSON!
  uploads: [File]
  getEmail(email: String!): User!
}

type Mutation {
  signUp(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  changePassword(email: String!, id: ID, newPassword: String!): User
  forgotPassword(email: String!): JSON!
  updateUserRole(userId: String!, role: String!): JSON!
  manage(license: String!, licenseType: String!, quantity: Int!, listFee: Float!, discount: Float, supportDate: String, productSupportFee: Float, softwareUpdateFee: Float, otherFees: Float, cdPackFee: Float, unitPrice: Float, netFee: Float, user: String): Management
  deleteManagement(id: String): JSON!
  singleUpload(file: Upload!): File!
  multipleUpload(file: [Upload!]!): [File!]!
}

type AuthPayload {
  token: String
  user: User
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
}

type User {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Reconcile {
  productName: String
  licenseType: String
  quantity: String
  inventory: String
  supported: String
  difference: String
  amount: String
}

type Management {
  license: String!
  licenseType: String!
  quantity: Float!
  listFee: Float!
  discount: Float
  netFee: Float
  productSupportFee: Float
  softwareUpdateFee: Float
  otherFees: Float
  cdPackFee: Float
  unitPrice: Float
  supportDate: String
  user: String
}

type Price {
  name: String!
  NUP: String
  NUPSupport: String
  Processor: String
  ProcessorSupport: String
}

enum Role {
  ADMIN
  USER
}